name = moon
file_extensions [] = moon;

styles [] {
	.text : style {
		color = brown
		textmate_scope	= text
	}

	.phoneme : style {
		color = cyan
		textmate_scope = keyword
	}

	.numeric : style {
		color = green
		textmate_scope = constant.numeric
	}

	.number_tuple_punct : style {
		color = red_2
		textmate_scope = punctuation.definition.tag
	}

	.phoneme_sequence_punct : style {
		color = pink
		textmate_scope = support.class punctuation
	}

	.illegal : style {
		color = white
		background_color = red
		textmate_scope = invalid
	}
}

contexts [] {
	main : context {
		: include "illegal_length";
		: include "chat_command";
		: include "text";
		: include "illegal";
	}

	illegal_length : context {
		: pattern {
			regex \= (.{129,})
			styles [] = .illegal;
		}
	}

	illegal : context {
		: pattern {
			regex \= ([^\s])
			styles [] = .illegal;
		}
	}

	text : context {
		: pattern {
			regex \= ([^\[\]])
			styles [] = .text;
		}
	}

	chat_command : context {
		: inline_push {
			regex \= (\[)
			styles [] = .phoneme_sequence_punct;
			: pop {
				regex \= (\])
				styles [] = .phoneme_sequence_punct;
			}
			: include "phoneme_len_and_pitch";
			: include "phoneme_len";
			: include "voice_selection";
			: include "illegal";
		}
	}
	
	voice_selection : context {
		: pattern {
			regex \= (:[a-z]{2})
			styles [] = .phoneme_sequence_punct;
		}
	}

	phoneme_len_and_pitch : context {
		: pattern {
			regex \= ([a-z'_]+)(<)(\d+)(,)(\d+)(>)
			styles [] = .phoneme, .number_tuple_punct, .numeric, .number_tuple_punct, .numeric, .number_tuple_punct;
		}
	}
	
	phoneme_len : context {
		: pattern {
			regex \= ([a-z'_]+)(<)(\d+)(>)
			styles [] = .phoneme, .number_tuple_punct, .numeric,.number_tuple_punct;
		}
	}
}
